package com.gomeplus.im.api.service.impl;

import java.util.HashMap;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import redis.clients.jedis.JedisCluster;

import com.gomeplus.im.api.dao.UserMapper;
import com.gomeplus.im.api.global.Global;
import com.gomeplus.im.api.model.User;
import com.gomeplus.im.api.request.response.ResultModel;
import com.gomeplus.im.api.service.UserService;
import com.gomeplus.im.api.utils.JedisClusterClient;
import com.gomeplus.im.api.utils.PasswordEncode;

@Service
public class UserServiceImpl implements UserService {
    private static final Logger logger = LoggerFactory.getLogger(UserServiceImpl.class);
    
    private static final String TOKEN_SUFFIX = "token";
    
    private static final int TOKEN_EXPIRES = 7*24*60*60;

    @Autowired
    private UserMapper userMapper;
    @Override
    public ResultModel<Object> saveUser(final User user,String appId) {
    	if (user==null) {
    		logger.error("参数为空");
    		return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "参数为空", new HashMap<>());
    	}
    	String userName = user.getUserName();
    	long phoneNumber = user.getPhoneNumber();
    	if (StringUtils.isEmpty(userName)) {
    		logger.error("用户名不能为空");
    		return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "用户名不能为空", new HashMap<>());
    	}
    	
    	if (phoneNumber < 10000000000L) {
    		logger.error("手机号码不正确");
    		return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "手机号码不正确", new HashMap<>());
    	}
    	long time = System.currentTimeMillis();
    	String pwd = user.getPassword();
    	if (StringUtils.isEmpty(pwd)) {
    		logger.error("密码为空");
    		return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "密码为空", new HashMap<>());
    	}
        try {
            User oldUser = userMapper.getUserInfoByPhoneNumber(phoneNumber);
            if (oldUser != null) {
            	logger.error("手机号已注册");
                return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "手机号已注册", new HashMap<>());
            }
            User oldUser2=userMapper.getUserInfoByUserName(userName);
            if (oldUser2!=null) {
            	logger.error("用户名已注册");
            	return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "用户名已注册", new HashMap<>());
			}

            //ZHTODO 暂时使用SHA-256,盐值为空 liuzhenhuann 20160603
            pwd = PasswordEncode.encode(pwd, "");
            //ZHTODO 用户名的hash值是用来做数据库索引时用的，当根据用户名查询时，可以生成hashCode进行查询，速度快
            //但是hash值尽量保证不同的值生成的hashCode不同，所以，暂时在使用查询的时候，不使用用户名的hashCode查询 liuzhenhuan 20160606
            user.setUserNameHashId(userName.hashCode());
            user.setPassword(pwd);
            user.setCreateTime(time);
            user.setUpdateTime(time);
            String token = com.gomeplus.im.api.utils.StringUtils.getUuid();
            long tokenExpires = time + Global.TOKEN_EXPIRE_TIME;
            user.setToken(token);
            user.setTokenValidity(tokenExpires);
            
            long saveRow = userMapper.saveUser(user);
            logger.debug("saveRow: "+saveRow);
            logger.info("注册成功userName{}",user.getUserName());
            return new ResultModel<Object>(ResultModel.RESULT_OK, "注册成功", user);
        } catch (Exception e) {
            logger.error("注册失败，出现异常",e);
            return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "注册失败", new HashMap<>());
        }
    }

    @Override
    public ResultModel<Object> updateUserTokenInfo(User reqUser,String appId) {
    	if (reqUser==null) {
			logger.error("参数为空");
			return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "参数为空", new HashMap<>());
		}
        try {
            User user = getUserInfoByCondition(reqUser.getId(), reqUser.getUserName(), reqUser.getPhoneNumber());
            if (user==null) {
            	return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "用户不存在，更新失败", new HashMap<>());
			}
			String token = com.gomeplus.im.api.utils.StringUtils.getUuid();
            user.setToken(token);
            long now = System.currentTimeMillis();
            long tokenExpires = now + Global.TOKEN_EXPIRE_TIME;
            user.setTokenValidity(tokenExpires);
            user.setUpdateTime(now);
            userMapper.updateUserInfo(user);
            logger.info("token更新成功 id:{}",reqUser.getId());
            return new ResultModel<Object>(ResultModel.RESULT_OK, "更新token成功", user);
			
        } catch (Exception e) {
            logger.error("更新token失败,出现异常",e);
            return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "更新token失败", new HashMap<>());
        }
    }

    @Override
    public ResultModel<Object> getUserInfo(User reqUser,String appId) {
    	if (reqUser==null) {
    		logger.error("参数为空");
    		return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "参数为空", new HashMap<>());
		}
        try {
            User user = getUserInfoByCondition(reqUser.getId(), reqUser.getUserName(), reqUser.getPhoneNumber());
            if(user==null){
            	logger.error("用户不存在");
            	return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "用户不存在", new HashMap<>());
            }
            HashMap<String, Object> map = getInfo(user);
            logger.info("获取用户信息成功,id:{},userName:{}",user.getId(),user.getUserName());
            return new ResultModel<Object>(ResultModel.RESULT_OK, "获取信息成功", map);
        } catch (Exception e) {
            logger.error("获取信息失败，出现异常",e);
            return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "获取信息失败", new HashMap<>());
        }
    }

    @Override
	public ResultModel<Object> findUser(String keyWord,String appId) {
		if (StringUtils.isBlank(keyWord)) {
			logger.error("参数为空");
			return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "参数为空", new HashMap<>());
		}
		try {
			List<User> userList = userMapper.findUser(keyWord);
			if (CollectionUtils.isEmpty(userList)) {
				logger.error("没有符合此查询条件的用户");
				return new ResultModel<Object>(ResultModel.RESULT_FAILURE,"没有符合此查询条件的用户", new HashMap<>());
			}
			logger.info("根据关键字模糊查询成功,keyWord: {}",keyWord);
			return new ResultModel<Object>(ResultModel.RESULT_OK, "获取信息成功",userList);
		} catch (Exception e) {
			logger.error("获取信息失败，出现异常", e);
			return new ResultModel<Object>(ResultModel.RESULT_FAILURE,"获取信息失败", new HashMap<>());
		}
	}
    @Override
    public ResultModel<Object> login(User reqUser,String appId) {
    	//ZHTODO v1.0 支持根据手机号码,用户名进行登录2种方法,以后可能会增加 liuzhenhuan 20160603 
    	if (reqUser==null) {
    		logger.error("参数为空");
    		return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "参数为空", new HashMap<>());
		}
    	long id=reqUser.getId();
    	String userName = reqUser.getUserName();
    	long phoneNumber = reqUser.getPhoneNumber();
    	String password = reqUser.getPassword();
    	if (id<=0L) {
    		logger.error("id不正确，id:{}",id);
    		return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "id不正确", new HashMap<>());
		}
    	if (phoneNumber <0||(phoneNumber>0&&phoneNumber<10000000000L)) {
    		logger.error("手机号码不正确，phoneNumber:{}",phoneNumber);
            return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "手机号码不正确", new HashMap<>());
        }
    	
    	if (StringUtils.isEmpty(password)) {
    		logger.error("密码为空");
    		return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "密码为空", new HashMap<>());
    	}
    	
        try {
            User user = getUserInfoByCondition(id,userName, phoneNumber);
            if (user==null) {
            	logger.error("用户不存在");
            	return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "用户不存在", new HashMap<>());
            }
            long nowTime = System.currentTimeMillis();
			if (System.currentTimeMillis() > user.getTokenValidity()) {
				String token = com.gomeplus.im.api.utils.StringUtils.getUuid();
				long tokenExpires = nowTime + Global.TOKEN_EXPIRE_TIME;
				user.setToken(token);
				user.setTokenValidity(tokenExpires);
				userMapper.updateUserInfo(user);
			}
            
            JedisCluster jedis = JedisClusterClient.INSTANCE.getJedisCluster();
            String key = appId + "_"+id+ TOKEN_SUFFIX;
            jedis.setex(key, TOKEN_EXPIRES, user.getToken());
            //ZHTODO 使用和注册用户相同的加密方式，如有修改，请保持一致的加密方法 liuzhenhuan 20160603
            String encodePwd = PasswordEncode.encode(reqUser.getPassword(),"");
            if (!StringUtils.equals(encodePwd, user.getPassword())) {
            	logger.error("密码不正确");
            	return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "密码不正确", new HashMap<>());
			}
            return new ResultModel<Object>(ResultModel.RESULT_OK, "登录成功", user);
            
        } catch (Exception e) {
            logger.error("登录失败,出现异常",e);
            return new ResultModel<Object>(ResultModel.RESULT_FAILURE, "登录失败", new HashMap<>());
        }
    }

    private HashMap<String, Object> getInfo(User user) {
        HashMap<String, Object> map = new HashMap<>();
        map.put("id", user.getId());
        map.put("userName", user.getUserName());
        map.put("nickName", user.getNickName());
        map.put("gender", user.getGender());
        map.put("avatar", user.getAvatar());
        map.put("region", user.getRegion());
        map.put("birthday", user.getBirthday());
        map.put("autograph", user.getAutograph());
        map.put("phoneNumber", user.getPhoneNumber());
        return map;
    }
    
    
    /**
     * ZHTODO v1.0根据用户的id，手机号或者是用户名得到用户信息
     *  之后可能会有邮箱或者是其他的查询条件 liuzhenhuan 20160603 
     * @param user 用户信息
     * @return
     */
    private User getUserInfoByCondition(long id,String userName,long phoneNumber){
    	User userInfo = userMapper.getUserInfoById(id);
    	if (userInfo!=null) {
			return userInfo;
		}
    	return getUserInfoByCondition(userName, phoneNumber);
    }
    /**
     * ZHTODO v1.0根据用户的手机号或者是用户名得到用户信息
     *  之后可能会有邮箱或者是其他的查询条件 liuzhenhuan 20160603 
     * @param user 用户信息
     * @return
     */
    private User getUserInfoByCondition(String userName,long phoneNumber){
    	User userInfo =null;
    	userInfo=userMapper.getUserInfoByPhoneNumber(phoneNumber);
    	if (userInfo!=null) {
    		return userInfo;
    	}
    	if (StringUtils.isEmpty(userName)) {
    		return null;
    	}
    	userInfo=userMapper.getUserInfoByUserName(userName);
    	if (userInfo!=null) {
    		return userInfo;
    	}
    	return null;
    }

	

}
