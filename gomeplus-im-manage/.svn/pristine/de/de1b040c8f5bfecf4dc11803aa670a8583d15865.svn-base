package com.gomeplus.im.manage.controller;

import com.gomeplus.im.manage.pageSupport.PageInfo;
import com.gomeplus.im.manage.pageSupport.PageInfoFactory;
import com.gomeplus.im.manage.pojo.Menu;
import com.gomeplus.im.manage.pojo.User;
import com.gomeplus.im.manage.pojo.UserPermit;
import com.gomeplus.im.manage.service.SysUserService;
import com.gomeplus.im.manage.utils.HttpUtil;
import com.gomeplus.im.manage.utils.ParamUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("/user")
public class SysUserController {
	@Autowired
	private SysUserService sysUserService;
	
	@RequestMapping("listUser")
	public String listForum(HttpServletRequest request, Model model){
		int pageNo = ParamUtil.getIntParams(request, "pageNo", 1);
		String userName = ParamUtil.getParams(request, "userName", null);
		String name = ParamUtil.getParams(request, "name", null);
		PageInfo pageInfo = PageInfoFactory.getPageInfo(pageNo);
		List<User> list = sysUserService.listUser(pageInfo, userName, name);
		
		model.addAttribute("users", list);
		model.addAttribute("pageInfo", pageInfo);
		
		return "user/listUser";
	}
	
	@RequestMapping("preAddUser")
	public String preAddUser(HttpServletRequest request, Model model) {
		String userName = ParamUtil.getParams(request, "userName", null);
		if(userName != null) {
			User user = sysUserService.getUserByUserName(userName);
			model.addAttribute("user", user);
		}
		
		return "user/addUser";
	}
	
	@RequestMapping(value="addUser", method = RequestMethod.POST)
	public String addUser(HttpServletRequest request, Model model) {
		long id = ParamUtil.getLongParams(request, "id", -1);
		String userName = request.getParameter("userName");
		String name = request.getParameter("name");
		String password = request.getParameter("password");
		
		User user = new User();
		user.setName(name);
		user.setPassword(password);
		user.setUserName(userName);
		user.setId(id);
		if(id <= 0) {
			User user_old = sysUserService.getUserByUserName(userName);
			if(user_old != null) {
				model.addAttribute("error", "用户名已存在！");
				model.addAttribute("user", user);
				return "user/addUser";
			}
			user.setCreateTime(System.currentTimeMillis());
			sysUserService.saveUser(user);
		} else {
			sysUserService.updateUserByid(user);
		}
		
		return "redirect:listUser.do";
	}
	
	@RequestMapping(value="delUser", method = RequestMethod.GET)
	public String delUser(HttpServletRequest request, Model model) {
		String ids = ParamUtil.getParams(request, "ids", "");
		sysUserService.delUser(ids);
		
		return "redirect:listUser.do";
	}
	
	@RequestMapping(value="preEditPassword", method = RequestMethod.GET)
	public String preEditPassword(HttpServletRequest request, Model model) {
		return "user/editPassword";
	}
	
	@RequestMapping(value="editPassword", method = RequestMethod.POST)
	public String editPassword(HttpServletRequest request, Model model) {
		String password = ParamUtil.getParams(request, "password", null);
		String newPassword = ParamUtil.getParams(request, "newPassword", null);
		
		HttpSession session = request.getSession();
		User user = (User) session.getAttribute("loginInfo");
		//ZHTODOD 数据库中的密码使用的是明文 ，需要修改为密文吗 liuzhenhuan 20160518 
		if(!user.getPassword().equals(password)) {
			model.addAttribute("error", "旧密码不正确！");
			model.addAttribute("password", password);
			model.addAttribute("newPassword", newPassword);
			
			return "user/editPassword";
		} else {
			user.setPassword(newPassword);
			sysUserService.updateUserByid(user);
			session.removeAttribute("loginInfo");
		}
		
		return "redirect:../index.jsp";
	}
	
	@RequestMapping(value="listMenu", method = RequestMethod.GET)
	public void listMenu(HttpServletRequest request, HttpServletResponse response) {
		long uid = ParamUtil.getLongParams(request, "uid", 0);
		List<Long> userMemus = sysUserService.listUserMenuId(uid);
		List<Menu> list = sysUserService.getMenuByPid(0L);
		for(Menu menu : list) {
			if(userMemus.indexOf(menu.getId()) >= 0) {
				menu.setSelected(1);
			}
			//List<Menu> subMenus = new ArrayList<Menu>();
			List<Menu> subList = sysUserService.getMenuByPid(menu.getId());
			for(Menu child : subList) {
				if(userMemus.indexOf(child.getId()) >= 0) {
					child.setSelected(1);
				} 
			}
			menu.setChildren(subList);
		}
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("Rows", list);
		HttpUtil.writeResult(response, map);
	}
	
	@RequestMapping(value="preAddPermit", method = RequestMethod.GET)
	public String preAddPermit(HttpServletRequest request, Model model) {
		long uid = ParamUtil.getLongParams(request, "uid", 0);
		
		model.addAttribute("uid", uid);
		
		return "user/addPermit";
	}
	
	@RequestMapping(value="addPermit", method = RequestMethod.POST)
	public String addPermit(HttpServletRequest request, Model model) {
		String menusIds = ParamUtil.getParams(request, "menusIds", "");
		long uid = ParamUtil.getLongParams(request, "uid", 0);
		sysUserService.delUserPermit(uid);
		String[] ids = menusIds.split(",");
		for(String id : ids) {
			UserPermit userPermit = new UserPermit();
			userPermit.setUid(uid);
			userPermit.setMenuId(Long.parseLong(id));
			sysUserService.saveUserPermit(userPermit);
		}
		
		return "redirect:preAddPermit.do?uid=" + uid;
	}
}
